// <auto-generated />
using System;
using FluentApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluentApi.Migrations
{
    [DbContext(typeof(AcademyContext))]
    partial class AcademyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FluentApi.Assistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("FluentApi.Curator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Curators");
                });

            modelBuilder.Entity("FluentApi.Dean", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Deans");
                });

            modelBuilder.Entity("FluentApi.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Building")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HeadId");

                    b.HasIndex(new[] { "Name" }, "UQ__Departme__737584F657FDF7AB")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FluentApi.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Building")
                        .HasColumnType("int");

                    b.Property<int>("DeanId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeanId");

                    b.HasIndex(new[] { "Name" }, "UQ__Facultie__737584F69FEBEE82")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("FluentApi.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Name" }, "UQ__Groups__737584F642D37032")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FluentApi.GroupsCurator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CuratorId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuratorId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsCurators");
                });

            modelBuilder.Entity("FluentApi.GroupsLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LectureId");

                    b.ToTable("GroupsLectures");
                });

            modelBuilder.Entity("FluentApi.Head", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Heads");
                });

            modelBuilder.Entity("FluentApi.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("FluentApi.LectureRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Building")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__LectureR__737584F68C1FCA99")
                        .IsUnique();

                    b.ToTable("LectureRooms");
                });

            modelBuilder.Entity("FluentApi.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("LectureRoomId")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("LectureRoomId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("FluentApi.staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((18))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Name");

                    b.HasIndex(new[] { "Email" }, "UQ__Students__A9D10534CF9C2E4C")
                        .IsUnique();

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("FluentApi.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__Subjects__737584F686705768")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("FluentApi.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("FluentApi.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Elvin", (string)null);
                });

            modelBuilder.Entity("FluentApi.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StaffId" }, "StaffId_UNIQUE_Constraint")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("FluentApi.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("binary(70)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FluentApi.Assistant", b =>
                {
                    b.HasOne("FluentApi.Teacher", "Teacher")
                        .WithMany("Assistants")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Assistant__Teach__6477ECF3");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FluentApi.Curator", b =>
                {
                    b.HasOne("FluentApi.Teacher", "Teacher")
                        .WithMany("Curators")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Curators__Teache__656C112C");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FluentApi.Dean", b =>
                {
                    b.HasOne("FluentApi.Teacher", "Teacher")
                        .WithMany("Deans")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Deans__TeacherId__66603565");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FluentApi.Department", b =>
                {
                    b.HasOne("FluentApi.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .IsRequired()
                        .HasConstraintName("FK__Departmen__Facul__6754599E");

                    b.HasOne("FluentApi.Head", "Head")
                        .WithMany("Departments")
                        .HasForeignKey("HeadId")
                        .IsRequired()
                        .HasConstraintName("FK__Departmen__HeadI__68487DD7");

                    b.Navigation("Faculty");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("FluentApi.Faculty", b =>
                {
                    b.HasOne("FluentApi.Dean", "Dean")
                        .WithMany("Faculties")
                        .HasForeignKey("DeanId")
                        .IsRequired()
                        .HasConstraintName("FK__Faculties__DeanI__693CA210");

                    b.Navigation("Dean");
                });

            modelBuilder.Entity("FluentApi.Group", b =>
                {
                    b.HasOne("FluentApi.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__Departme__6A30C649");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("FluentApi.GroupsCurator", b =>
                {
                    b.HasOne("FluentApi.Curator", "Curator")
                        .WithMany("GroupsCurators")
                        .HasForeignKey("CuratorId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupsCur__Curat__6B24EA82");

                    b.HasOne("FluentApi.Group", "Group")
                        .WithMany("GroupsCurators")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupsCur__Group__6C190EBB");

                    b.Navigation("Curator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FluentApi.GroupsLecture", b =>
                {
                    b.HasOne("FluentApi.Group", "Group")
                        .WithMany("GroupsLectures")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupsLec__Group__6D0D32F4");

                    b.HasOne("FluentApi.Lecture", "Lecture")
                        .WithMany("GroupsLectures")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupsLec__Lectu__6E01572D");

                    b.Navigation("Group");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("FluentApi.Head", b =>
                {
                    b.HasOne("FluentApi.Teacher", "Teacher")
                        .WithMany("Heads")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Heads__TeacherId__6EF57B66");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FluentApi.Lecture", b =>
                {
                    b.HasOne("FluentApi.Subject", "Subject")
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Lectures__Subjec__6FE99F9F");

                    b.HasOne("FluentApi.Teacher", "Teacher")
                        .WithMany("Lectures")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Lectures__Teache__70DDC3D8");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FluentApi.Schedule", b =>
                {
                    b.HasOne("FluentApi.Lecture", "Lecture")
                        .WithMany("Schedules")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__Schedules__Lectu__71D1E811");

                    b.HasOne("FluentApi.LectureRoom", "LectureRoom")
                        .WithMany("Schedules")
                        .HasForeignKey("LectureRoomId")
                        .IsRequired()
                        .HasConstraintName("FK__Schedules__Lectu__72C60C4A");

                    b.Navigation("Lecture");

                    b.Navigation("LectureRoom");
                });

            modelBuilder.Entity("FluentApi.Tutor", b =>
                {
                    b.HasOne("FluentApi.staff", "Staff")
                        .WithOne("Tutor")
                        .HasForeignKey("FluentApi.Tutor", "StaffId")
                        .HasConstraintName("FK__Tutors__StaffId__33D4B598");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FluentApi.Curator", b =>
                {
                    b.Navigation("GroupsCurators");
                });

            modelBuilder.Entity("FluentApi.Dean", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("FluentApi.Department", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("FluentApi.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("FluentApi.Group", b =>
                {
                    b.Navigation("GroupsCurators");

                    b.Navigation("GroupsLectures");
                });

            modelBuilder.Entity("FluentApi.Head", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("FluentApi.Lecture", b =>
                {
                    b.Navigation("GroupsLectures");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("FluentApi.LectureRoom", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("FluentApi.staff", b =>
                {
                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("FluentApi.Subject", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("FluentApi.Teacher", b =>
                {
                    b.Navigation("Assistants");

                    b.Navigation("Curators");

                    b.Navigation("Deans");

                    b.Navigation("Heads");

                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
